#!/usr/bin/python3
#
# Copyright 2021 Dustin Kleckner
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import os
from collections import OrderedDict
import base64
import glob
import xml.etree.ElementTree as ET
import re
import numpy as np

'''
This file contains information about all the parameters used for the view
settings, broken out into a separate module for clarity.

This module also handles finding the shader and colormaps files, and
determining their names, etc.  (which are critical to setting up the
parameters, as they are options for them!)
'''

# ----------------------------------------------------------
# Paths for finding critical files
# ----------------------------------------------------------

_module_path = os.path.split(os.path.abspath(__file__))[0]
SHADER_PATH = os.path.join(_module_path, 'shaders')


# ----------------------------------------------------------
# Load the colormaps from an XML file
# ----------------------------------------------------------
# Note: these are generated by "generate_colormaps" in the shaders directory;
#  if you want to add new colormaps, do it there!

COLORMAPS = OrderedDict()
_colormap_names = OrderedDict()
_color_remaps = OrderedDict()

class ColorMap:
    def __init__(self, xml):
        self.short_name = xml.get('ShortName', None)
        self.name = xml.get('Name', self.short_name)
        self.length = int(xml.get('Length'))
        if self.length != 256:
            raise ValueError('Colormaps should have length 256! (found %d in "%s")' % (self.length, self.shortname))
        self.data = base64.b64decode(xml.text)
        if len(self.data) != self.length * 3:
            raise ValueError('Colormap "%s" has invalid length' % self.short_name)


for cm in ET.parse(os.path.join(SHADER_PATH, 'colormaps.xml')).getroot():
    cm = ColorMap(cm)
    COLORMAPS[cm.short_name] = cm
    _colormap_names[cm.short_name] = cm.name

for i1, c1 in enumerate("rgb"):
    for i2, c2 in enumerate("rgb"):
        for i3, c3 in enumerate("rgb"):
            c = c1 + c2 + c3 + "a"
            _color_remaps[c] = str((i1+1)*100 + (i2+1)*10 + (i3+1))


# -------------------------------------------------------
# Get a list of Shaders
# -------------------------------------------------------

SUBSHADER_TYPES = ('cloud_color', )
SUBSHADER_NAMES = {}
SUBSHADER_SOURCE = {}

def refresh_shaders():
    '''Load shaders from the shader directory.

    Normally not called by the user, but can be used to udpate sources,
    if they are being edited while a program is being run.
    '''

    for subshader in SUBSHADER_TYPES:
        ds = {}
        dn = {}

        for fn in sorted(glob.glob(os.path.join(SHADER_PATH, subshader + "_*.glsl"))):
            short_name = re.match('.*' + subshader + '_(.*).glsl', fn).group(1)

            with open(fn) as f:
                code = f.read()

            m = re.match(r'^\s*//\s*NAME:\s*(.*)\s*$', code, flags=re.MULTILINE)
            long_name = m.group(1) if m else short_name
            ds[short_name] = code
            dn[short_name] = long_name

        SUBSHADER_NAMES[subshader] = dn
        SUBSHADER_SOURCE[subshader] = ds

        # setattr(self, subshader + "_source", ds)
        # setattr(self, subshader + "_names", dn)

refresh_shaders()

#--------------------------------------------------------
# List of Parameters for Display
#--------------------------------------------------------
# Previously this data was stored in the View class, but this is a cleaner
#   solution because we shouldn't need to create an instance to get the
#   parameter names, limits, etc.  (which are used to build GUIs)

PARAMS = OrderedDict()

class ViewParam:
    def __init__(self, name, display_name,  cat, vcat, default, min=None, max=None, step=None, logstep=None, options=None):
        self.name = name
        self.display_name = display_name
        self.cat = cat
        self.vcat = vcat
        self.default = default

        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if step is not None:
            self.step = step
        if logstep is not None:
            self.logstep = logstep
        if options is not None:
            self.options = options

        PARAMS[name] = self

    type = property(lambda self: type(self.default))



ViewParam('R', 'Rotation', 'view', 'view', np.eye(3, dtype='f'))
ViewParam('X0', 'X0', 'view', 'uniform', np.zeros(3, dtype='f'))
ViewParam('X1', 'X1', 'view', 'uniform', np.ones(3, dtype='f') * 100)
ViewParam('center', 'Center', 'view', 'view', np.ones(3, dtype='f') * 128)
ViewParam('scale', 'Scale', 'view', 'view', 1.0, logstep=1.25)
ViewParam('fov', 'FOV', 'view', 'view', 30.0, min=0.0, max=120.0, step=5.0)

ViewParam('frame', 'Frame', 'playback', 'view', 0)

# Opacity replaced by "density"
# ViewParam('opacity', 'Cloud Opacity', 'render', 'uniform',
        # 0.5, min=1E-3, max=2, logstep=10**(1/8))

ViewParam('density', 'Density', 'render', 'uniform',
        0.5, min=1E-3, max=2, logstep=10**(1/8))
ViewParam('glow', 'Glow', 'render', 'uniform',
        1.0, min=1, max=100, logstep=10**(1/4))


MAX_CHANNELS = 3
_default_colormaps = ['inferno', 'viridis', 'cividis']

# _isocolor_names = {
#     'solid': 'Solid',
#     'cm1': 'Channel 1 Colormap',
#     'cm2': 'Channel 2 Colormap',
#     'cm3': 'Channel 2 Colormap',
# }

for n in range(1, MAX_CHANNELS + 1):
    ViewParam(f'channel{n}', f'Channel {n}', 'render', 'shader', (n == 1))
    ViewParam(f'colormap{n}', 'Colormap', 'render', 'view', _default_colormaps[n-1],
        options=_colormap_names)
    ViewParam(f'exposure{n}', 'Exposure', 'render', 'uniform',
        0.0, min=-5, max=5, step=0.5)

    ViewParam(f'iso{n}_active', f'Isosurface {n}', 'isosurface', 'shader', False)
    ViewParam(f'iso{n}_level', 'Level', 'isosurface', 'uniform', 0.5, min=0.0,
        max=1.0, step=0.1)
    # ViewParam(f'iso{n}_color', 'Color', 'isosurface', 'shader', 'solid',
        # options=_isocolor_names)
    color = np.zeros(3, dtype='f')
    color[n-1] = 1
    ViewParam(f'iso{n}_color', 'Color', 'isosurface', 'uniform', color)
    ViewParam(f'iso{n}_opacity', 'Opacity', 'isosurface', 'uniform', 0.3, min=0.0,
        max=1.0, step=0.1)



# ViewParam('show_isosurface', 'Show Isosurface', 'hidden', 'shader', False)
# ViewParam('iso_offset', 'Isosurface Offset', 'hidden', 'uniform', 0.5)
# ViewParam('iso_level', 'Isosurface Level', 'hidden', 'shader', 'single')
# ViewParam('iso_color', 'Isosurface Color', 'hidden', 'shader', 'shiny')
# ViewParam('exposure', 'Exposure (stops)', 'hidden', 'uniform',
        # 0.0, min=-5, max=5, step=0.5)



ViewParam('step_size', 'Render Step', 'advanced', 'uniform', 1.0,
        min=0.1, max=2, logstep=2**(1/2))
ViewParam('perspective_xfact', 'Persp. X Coeff.', 'advanced', 'uniform', 0.0,
        min=-.5, max=.5, step=1E-2)
ViewParam('perspective_yfact', 'Persp. Y Coeff.', 'advanced', 'uniform', 0.0,
                min=-.5, max=.5, step=1E-2)
ViewParam('perspective_zfact', 'Persp. Z Coeff.', 'advanced', 'uniform', 0.0,
        min=-.5, max=.5, step=1E-2)
ViewParam('color_remap', 'Color Remap', 'advanced', 'shader', 'rgba',
            options=_color_remaps)
ViewParam('cloud_color', 'Cloud Shader', 'advanced', 'shader', 'colormap',
        options=SUBSHADER_NAMES['cloud_color'])
ViewParam('gamma2', 'Raw Data Gamma 2', 'advanced', 'shader', False)
